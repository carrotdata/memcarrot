#################################################################################
# Memcarrot configuration
################################################################################
#
# Server port
#server.port=11211
#
# Server host
#server.address=localhost
#
# Worker pool size
#workers.pool.size=1
#
# I/O buffer size
#kv.size.max=4,194,304
#
# TCP Send/Receive buffer size
#
#tcp.buffer.size=32,768

#################################################################################
#  Carrot Cache configuration file
#################################################################################

#
# List of all caches logical names, comma-separated
#
cache.names=cache

#
# Caches types ('memory', 'file' only supported), comma-separated
#
cache.types=memory
 
#
# Cache victim names. If cache name is 'C1', then to lookup for its victim name 
# we must request 'C1.victim.name' property value 
#
#victim.name=


# 
#  Cache root directory - where to save cached data and snapshot
#
#root.dir.path=./data

#   
# Data segment size 
# Default is 4MB (Memory)
data.segment.size=16777216

# 
# Maximum storage limit to use for cache 
# Default - 1GB
#storage.size.max=4_073_741_824
cache.storage.size.max=8147483648

# 
# When to start GC (garbage collection) - size of the cache as a fraction of the maximum cache size 
#
#scavenger.ratio.start=0.99

#
# When to stop GC (garbage collection) - size of the cache as a fraction of the maximum cache size
#
#scavenger.ratio.stop=0.9

# 
# Discard cached entry if it in this lower percentile - start value 
#
#scavenger.dump.entry.below.min=0.1

#
# Discard cached entry if it in this lower percentile - stop value (maximum) 
#
#scavenger.dump.entry.below.max=0.5

#
# Scavenger adjustment step
#
#scavenger.dump.entry.below.step=0.1

#
# Scavenger number of threads
#
#scavenger.number.threads=1

#
# Number of popularity ranks (or bins to insert incoming writes to)
#
#popularity.number.ranks=8

#
# Minimum active data set ratio
#
#active.dataset.ratio.min=0.9

#
# IO Pool size for FileIO save segments to disk
#
#storage.io.pool.size=4

# 
# Number of segments in S-LRU (Eviction)
#
#eviction.slru.number.segments=8

# 
# New item insertion point for SLRU (Eviction)
#
#eviction.slru.insert.point=7

#
# Admission Queue start size in fraction of a full cache size
#
#admission.queue.size.ratio.start=0.5

# 
# Admission Queue minimum size in fraction of a full cache size
#
#admission.queue.size.ratio.min=0.1

# 
# Admission Queue maximum size in fraction of a full cache size
#
#admission.queue.size.ratio.max=0.5

#
# Promotion Queue start size in fraction of a full cache size
#
#promotion.queue.size.ratio.start=0.5

#
# Promotion Queue minimum size in fraction of a full cache size
#
#promotion.queue.size.ratio.min=0.1

#
# Promotion Queue maximum size in fraction of a full cache size
#
#promotion.queue.size.ratio.max=0.5

#
# Random configuration parameter for random promotion controller
#
#random.promotion.probability=0.1

# 
# Cumulative average write rate limit  (bytes/sec) (SSD - based caches)
# when throughput controller is enabled
#
#write.avg.rate.limit=52428800

#
# Some file systems : ext4, xfs, APFS etc supports sparse files and so called 
# "hole punching" - discarding  regions of files. We use different algorithm of compaction when file system 
#  supports these features. Default: false. (not supported yet)
#
#sparse.files.support=false
  
#
# Index starting number of slots power of 2 - L ( N = 2**L) N - number of slots 
# Default: 16 - 64K slots (2**16)
index.slots.power=16

#
# Promote item from victim cache on hit
#  
#victim.promotion.on.hit=true

#
# Cache write throughput check interval key  
#
#throughput.check.interval.sec=3600
  
#
# Cache write throughput controller tolerance limit
#
#throughput.tolerance.limit=0.05
  
#
# Throughput controller number of adjustment steps
#
#throughput.adjustment.steps=10

#
# Scavenger run interval in seconds
#
#scavenger.run.interval.sec=60
  
#
# Does index support memory embedding (not implemented yet)
#
#index.data.embedded=false
  
#
# Maximum data size to embed   
#
#index.data.embedded.size.max=100

#
# Class name for main queue index format implementation
#
index.format.impl=com.carrotdata.cache.index.SubCompactBaseNoSizeIndexFormat
  
#
# Class name for admission queue index format implementation
#
#index.format.aq.impl=com.onecache.core.index.AQIndexFormat

#
# Class name for cache eviction policy implementation
#
#eviction.policy.impl=com.onecache.core.eviction.SLRUEvictionPolicy
  
#
# Class name for cache admission controller implementation (no default)
#
#admission.controller.impl=

#
# Class name for cache promotion controller implementation (no default)
#
#promotion.controller.impl=

#
# Class name for cache throughput controller implementation (no default)
#
#throughput.controller.impl=
  
#
# Class name for cache recycling controller implementation
#
#recycling.selector.impl=com.onecache.core.controllers.MinAliveRecyclingSelector
  
#
# Class name for cache data writer implementation
#
#data.writer.impl=com.onecache.core.io.BaseDataWriter
  
#
# Class name for cache data reader implementation (Memory)
#
#memory.data.reader.impl=com.onecache.core.io.BaseMemoryDataReader
  
#
# Class name for cache data reader implementation (File)
#
#file.data.reader.impl=com.onecache.core.io.BaseFileDataReader
  
#
# Block writer block size
#
#block.writer.block.size=4096
  
#
# File prefetch buffer size
#
#file.prefetch.buffer.size=4194304
  
#
# Cache expiration support implementation 
# supports range 1 sec - ~ 32678 (2^15) min
#
#expire.support.impl=com.onecache.core.expire.ExpireSupportSecondsMinutes
  
#
# Random admission controller ratio start
#
#random.admission.ratio.start=1.0
  
#
# Random admission controller ratio stop
#random.admission.ratio.stop=0.0
  
#
# For expiration based admission controller - minimum expiration supported in seconds
#
#expire.bin.value.start=60
  
#
# For expiration  based admission controller - bin value multiplier
#
#expire.multiplier.value=2
  
# 
# Keep active data set fraction above this threshold 
#active.dataset.ratio.min=0.9 

#
# Cache eviction disabled mode
#
#eviction.disabled=false

#
# IO storage pool size
#storage.io.pool.size=4

# 
# Promotion on hit from victim to main cache
#victim.promotion.on.hit=true

#
# Victim cache promotion popularity threshold
#victim.promotion.threshold=0.9

#
# Spin wait time on high pressure in nanoseconds during PUT operation
#spin.wait.time.ns=10000

#
# JMX metrics domain name
#jmx.metrics.domain.name=com.carrotdata.cache

#
# Hybrid mode of operation. When inverse mode is on data goes first to victim cache and later will be promoted
# to the parent cache.
#
#hybrid.inverse.mode=false

#
# Maximum wait time for put operation in ms
#
#cache.wait.put.max.ms=20

#
# Maximum key-value size (limited by data segment size as well)
#
#cache.max.kv.size = 268,435,448

#
# Thread local storage support. Must be enabled for the server (memcached)
#
#tls.supported=false

#
# Initial buffer size for thread local storage
#
#tls.buffer.size.start=65,536

#
# Maximum buffer size for thread local storage
#
#tls.buffer.size.max=268,435,456

############################
# Compression configuration
############################

#
# Cache compression enabled
#
compression.enabled=true

#
# Compression block size
#
#compression.block.size=4096

#
# Compression dictionary size
#
compression.dictionary.size=1048576

#
# Compression level (0-22 for ZSTD)
#
#compression.level=3

#
# Compression codec
#
#compression.codec=ZSTD

#
# Compression dictionary enabled
#
#compression.dictionary.enabled=true

#
# Train dictionary on keys as well?
#
#compression.keys.enabled=true

#
# Dictionary training mode (full async is not supported yet)
#
#compression.dictionary.training.async=true

#
# Save cache on process shutdown
#
save.on.shutdown=true

#
# Estimated average key-value size in bytes
#
estimated.avg.kv.size=1024

#
# Memory buffer pool size
#
#memory.buffer.pool.size.max=4

#
# Pro-active expiration check probability (0-1)
# 
#proactive.expiration.factor=0.25

# 
# Object Cache initial output buffer size - not relevant for server
#  
#objectcache.buffer.size.start=64536

#
# Object Cache maximum output buffer size - not relevant for server
#
#objectcache.buffer.size.max=-1

#
# Vacuum cleaner interval in seconds
# Default: -1 - disabled
#vacuum.cleaner.interval=-1
