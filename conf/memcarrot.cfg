#################################################################################
# Memcarrot configuration
################################################################################
#
# Server port
#memcarrot.server-port=11211
#
# Server host
#memcarrot.server-address=localhost
#
# Worker pool size
#memcarrot.workers-pool-size=1
#
# I/O buffer size
#memcarrot.io-buffer-size=8,388,608

#################################################################################
#  Carrot Cache configuration
#################################################################################

#
# List of all caches logical names, comma-separated
#
#caches.name-list=cache

#
# Caches types ('offheap', 'file' only supported), comma-separated
#
#caches.types-list=offheap
 
#
# Cache victim names. If cache name is 'C1', then to lookup for its victim name 
# we must request 'C1.victim.name' property value 
#
#victim.name=


# 
#  Cache root directory - where to save cached data and snapshot
#
#root.dir-path=./data

#   
# Data segment size 
# Default is 4MB (Offheap)
#data.segment-size=4194304

# 
# Maximum storage limit to use for cache 
# Default - unlimited
#storage.max-size=0

# 
# When to start GC (garbage collection) - size of the cache as a fraction of the maximum cache size 
#
#scavenger.start-ratio=0.99

#
# When to stop GC (garbage collection) - size of the cache as a fraction of the maximum cache size
#
#scavenger.stop-ratio=0.9

# 
# Discard cached entry if it in this lower percentile - start value 
#
#scavenger.dump-entry-below-min=0.1

#
# Discard cached entry if it in this lower percentile - stop value (maximum) 
#
#scavenger.dump-entry-below-max=0.5

#
# Scavenger adjustment step
#
#scavenger.dump-entry-below-step=0.1

#
# Scavenger number of threads
#
#scavenger.number-threads=1

#
# Number of popularity ranks (or bins to insert incoming writes to)
#
#popularity-number-ranks=8

#
# Minimum active data set ratio
#
#minimum-active-dataset-ratio=0.9

#
# IO Pool size for FileIO save segments to disk
#
#storage-io-pool-size=4

# 
# Number of segments in S-LRU (Eviction)
#
#eviction.slru-number-segments=8

# 
# New item insertion point for SLRU (Eviction)
#
#eviction.slru-insert-point=4

#
# Admission Queue start size in fraction of a full cache size
#
#admission.queue-start-size-ratio=0.5

# 
# Admission Queue minimum size in fraction of a full cache size
#
#admission.queue-min-size-ratio=0.1

# 
# Admission Queue maximum size in fraction of a full cache size
#
#admission.queue-max-size-ratio=0.5

#
# Promotion Queue start size in fraction of a full cache size
#
#promotion.queue-start-size-ratio=0.5

#
# Promotion Queue minimum size in fraction of a full cache size
#
#promotion.queue-min-size-ratio=0.1

#
# Promotion Queue maximum size in fraction of a full cache size
#
#promotion.queue-max-size-ratio=0.5

#
# Random configuration parameter for random promotion controller
#
#promotion.probability=0.1

# 
# Cumulative average write rate limit  (bytes/sec) (SSD - based caches)
# when throughput controller is enabled
#
#write.avg-rate-limit=52428800

#
# Some file systems : ext4, xfs, APFS etc supports sparse files and so called 
# "hole punching" - discarding  regions of files. We use different algorithm of compaction when file system 
#  supports these features. Default: false. (not supported yet)
#
#sparse-files-support=false
  
#
# Index starting number of slots power of 2 - L ( N = 2**L) N - number of slots 
# Default: 16 - 64K slots (2**16)
#index.slots-power=16

#
# Promote item from victim cache on hit
#  
#victim.promotion-on-hit=true

#
# Cache write throughput check interval key  
#
#throughput.check-interval-sec=3600
  
#
# Cache write throughput controller tolerance limit
#
#throughput.tolerance-limit=0.05
  
#
# Throughput controller number of adjustment steps
#
#throughput.adjustment-steps=10

#
# Scavenger run interval in seconds
#
#scavenger.run-interval-sec=60
  
#
# Does index support memory embedding (not implemented yet)
#
#index.data-embedded=false
  
#
# Maximum data size to embed   
#
#index.data-embedded-size-max=100

#
# Class name for main queue index format implementation
#
#index.format-main-queue-impl=com.onecache.core.index.BaseIndexFormat
  
#
# Class name for admission queue index format implementation
#
#index.format-admission-queue-impl=com.onecache.core.index.AQIndexFormat

#
# Class name for cache eviction policy implementation
#
#eviction-policy-impl=com.onecache.core.eviction.SLRUEvictionPolicy
  
#
# Class name for cache admission controller implementation (no default)
#
#admission-controller-impl=

#
# Class name for cache promotion controller implementation (no default)
#
#promotion-controller-impl=

#
# Class name for cache throughput controller implementation (no default)
#
#throughput-controller-impl=
  
#
# Class name for cache recycling controller implementation
#
#recycling-selector-impl=com.onecache.core.controllers.MinAliveRecyclingSelector
  
#
# Class name for cache data writer implementation
#
#data-writer-impl=com.onecache.core.io.BaseDataWriter
  
#
# Class name for cache data reader implementation (Memory)
#
#memory.data-reader-impl=com.onecache.core.io.BaseMemoryDataReader
  
#
# Class name for cache data reader implementation (File)
#
#file.data-reader-impl=com.onecache.core.io.BaseFileDataReader
  
#
# Block writer block size
#
#block-writer-block-size=4096
  
#
# File prefetch buffer size
#
#file.prefetch-buffer-size=4194304
  
#
# Cache expiration support implementation 
# supports range 1 sec - ~ 32678 (2^15) min
#
#expire-support-impl=com.onecache.core.expire.ExpireSupportSecondsMinutes
  
#
# Random admission controller ratio start
#
#random.admission.ratio-start=1.0
  
#
# Random admission controller ratio stop
#random.admission.ratio-stop=0.0
  
#
# For expiration based admission controller - minimum expiration supported in seconds
#
#expire.start-bin-value=60
  
#
# For expiration  based admission controller - bin value multiplier
#
#expire.multiplier-value=2
  
# 
# Keep active data set fraction above this threshold 
#minimum-active-dataset-ratio=0.9 

#
# Cache eviction disabled mode
#
#eviction.disabled-mode=false

#
# IO storage pool size
#storage.io-pool-size=4

# 
# Promotion on hit from victim to main cache
#victim.promotion-on-hit=true

#
# Victim cache promotion popularity threshold
#victim.promotion-threshold=0.9

#
# Spin wait time on high pressure in nanoseconds during PUT operation
#spin.wait-time-ns=10000

#
# JMX metrics domain name
#jmx.metrics-domain-name=com.carrotdata.cache

#
# Hybrid mode of operation. When inverse mode is on data goes first to victim cache and later will be promoted
# to the parent cache.
#
#hybrid.inverse-mode=false

#
# Maximum wait time for put operation in ms
#
#cache.max-wait-on-put-ms=20

#
# Maximum key-value size (limited by data segment size as well)
#
#cache.max-key-value-size = 268,435,448

#
# Thread local storage support. Must be enabled for the server (memcached)
#
#cache.tls-supported=false

#
# Initial buffer size for thread local storage
#
#cache.tls-initial-buffer-size=65,536

#
# Maximum buffer size for thread local storage
#
#cache.tls-maximum-buffer-size=268,435,456

############################
# Compression configuration
############################

#
# Cache compression enabled
#
#cache.compression-enabled=false

#
# Compression block size
#
#cache.compression-block-size=4096

#
# Compression dictionary size
#
#cache.compression-dictionary-size=65,536

#
# Compression level (0-22 for ZSTD)
#
#cache.compression-level=3

#
# Compression codec
#
#cache.compression-codec=ZSTD

#
# Compression dictionary enabled
#
#cache.compression-dictionary-enabled=true

#
# Train dictionary on keys as well?
#
#cache.compression-keys-enabled=true

#
# Dictionary training mode (full async is not supported yet)
#
#cache.compression-dictionary-training-async=false

#
# Save cache on process shutdown
#
#cache.save-on-shutdown=false

#cache.estimated-avg-kv-size=10240

#cache.memory-buffer-pool-max-size
